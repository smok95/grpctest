// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpctest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpctestServiceClient is the client API for GrpctestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpctestServiceClient interface {
	Request(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type grpctestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpctestServiceClient(cc grpc.ClientConnInterface) GrpctestServiceClient {
	return &grpctestServiceClient{cc}
}

func (c *grpctestServiceClient) Request(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpctest.GrpctestService/request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpctestServiceServer is the server API for GrpctestService service.
// All implementations must embed UnimplementedGrpctestServiceServer
// for forward compatibility
type GrpctestServiceServer interface {
	Request(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGrpctestServiceServer()
}

// UnimplementedGrpctestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpctestServiceServer struct {
}

func (UnimplementedGrpctestServiceServer) Request(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedGrpctestServiceServer) mustEmbedUnimplementedGrpctestServiceServer() {}

// UnsafeGrpctestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpctestServiceServer will
// result in compilation errors.
type UnsafeGrpctestServiceServer interface {
	mustEmbedUnimplementedGrpctestServiceServer()
}

func RegisterGrpctestServiceServer(s grpc.ServiceRegistrar, srv GrpctestServiceServer) {
	s.RegisterService(&GrpctestService_ServiceDesc, srv)
}

func _GrpctestService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpctestServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.GrpctestService/request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpctestServiceServer).Request(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpctestService_ServiceDesc is the grpc.ServiceDesc for GrpctestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpctestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.GrpctestService",
	HandlerType: (*GrpctestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "request",
			Handler:    _GrpctestService_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpctest.proto",
}
